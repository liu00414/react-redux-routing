{"version":3,"sources":["components/Nav.js","components/Header.js","components/Loader.js","actions.js","components/Users.js","components/ToDos.js","components/Posts.js","components/NotFound.js","App.js","serviceWorker.js","reducers.js","index.js"],"names":["Nav","react_default","a","createElement","NavLink","to","exact","Component","Header","Fragment","this","props","page","Nav_Nav","Loader","className","UPDATE_USER","UPDATE_TODO","UPDATE_POSTS","Users","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleData","data","setState","name","error","isLoading","onUpdateUser","state","_this2","users","fetch","then","response","json","catch","err","message","console","log","Header_Header","Loader_Loader","map","item","key","id","react_fontawesome_index_es","icon","faUser","mapActionsToProps","newPayload","type","payload","user","connect","ToDos","onUpdateToDo","todo","userID","match","params","userName","faClipboardCheck","title","completed","userId","Posts","JSON","stringify","posts","onUpdatePosts","faGrinTongueSquint","body","NotFound","library","add","faStroopwafel","App","BrowserRouter","basename","Switch","Route","path","component","Boolean","window","location","hostname","allReducers","combineReducers","arguments","length","undefined","_ref","_ref2","_ref3","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","getState","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5b0e25c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {NavLink} from 'react-router-dom';\n\nexport default class Nav extends Component{\n    \n    render(){\n        return(\n        <nav>\n            <NavLink to=\"/\" exact>Users</NavLink>\n            <NavLink to=\"/to-dos\" exact>To Dos</NavLink>\n            <NavLink to=\"/posts\" exact>Posts</NavLink>\n        </nav>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Nav from './Nav.js';\n\nexport default class Header extends Component{\n    \n    render(){\n        return(\n            <React.Fragment>\n                <h1>{this.props.page}</h1>\n                <Nav/>\n            </React.Fragment>\n        \n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class Loader extends Component{\n    render(){\n        return(\n        <p className='loader'>Loading . . .</p>\n        )\n    }\n}","export const UPDATE_USER='user:updateUser'\nexport function updateUser(newPayload){\n    return {\n        type:UPDATE_USER,\n        payload:{\n            user: newPayload\n                \n            },\n    }\n}\n\n\nexport const UPDATE_TODO='todo:updateToDo'\nexport function updateToDo(newPayload){\n    return {\n        type:UPDATE_TODO,\n        payload:{\n            todo: newPayload\n                \n            },\n    }\n}\nexport const UPDATE_POSTS='todo:updatePosts'\nexport function updatePosts(newPayload){\n    return {\n        type:UPDATE_POSTS,\n        payload:{\n            posts: newPayload\n                \n            },\n    }\n}","import React, { Component } from 'react';\nimport Header from './Header.js';\nimport Loader from './Loader.js';\nimport {NavLink} from 'react-router-dom';\nimport { faUser }from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {connect} from 'react-redux';\nimport {updateUser} from '../actions';\n\n\nclass Users extends Component{\n     constructor(){\n        super();\n        this.state = {\n            error: null,\n            isLoading:false\n        }\n         \n    }\n    \n  handleData =(data)=>{\n        this.setState({\n            name:'Fred',\n            error: null,\n            isLoading:false\n        })\n      \n        this.props.onUpdateUser(data);\n        \n    }\n  \n  componentDidMount(){\n      if(!this.props.users){\n        this.setState({isLoading:true, error:null});\n        let url = 'https://jsonplaceholder.typicode.com/users';\n        \n        fetch(url)\n        .then(response => response.json())\n        .then(this.handleData)\n        .catch(err => {\n            this.setState({error:err.message,isLoading:false})\n        })  \n      }\n      \n    }\n    render(){\n        console.log(this.props.users);\n        return(\n        <React.Fragment>\n           <Header page='Users'/> \n           {this.state.isLoading&&<Loader />}\n            {this.state.error && ( <h3>{this.state.error}</h3> ) }\n                <ul>\n                    {this.props.users&&this.props.users.map((item)=>(\n                        <li key={item.id}><FontAwesomeIcon icon={faUser} />  {item.name}\n                            <button><NavLink to={'/to-dos/'+item.id+'/'+item.name}>To Do</NavLink></button>\n                            <button><NavLink to={'/posts/'+item.id+'/'+item.name}>Posts</NavLink></button>\n                        </li>\n                    ))}\n                </ul>\n        </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps=state=>(\n    {users:state.users}\n)\n\nconst mapActionsToProps={\n onUpdateUser:updateUser   \n}\n\nexport default connect(mapStateToProps,mapActionsToProps)(Users)\n//{this.state.error&&(<h3>{this.state.error.message}</h3>)}","import React, { Component } from 'react';\nimport Header from './Header.js';\nimport Loader from './Loader.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClipboardCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport {connect} from 'react-redux';\nimport {updateToDo} from '../actions';\n\nclass ToDos extends Component{\n     constructor(){\n        super();\n        this.state = {\n            error: null,\n            isLoading:false\n        }\n        \n    }\n  handleData =(data)=>{    \n        this.setState({\n            name:'Fred',\n            error: null,\n            isLoading:false\n        });\n      this.props.onUpdateToDo(data);\n        \n    }\n  \n  componentDidMount(){\n      if(!this.props.todo){\n        this.setState({isLoading:true});\n        let url = 'https://jsonplaceholder.typicode.com/todos/';\n        fetch(url)\n        .then(response => response.json())\n        .then(this.handleData)\n        .catch(err => {\n            this.setState({error:err})\n        })  \n      }\n      \n    }\n    render(){\n        const userID=this.props.match.params.userID;\n        const userName=this.props.match.params.userName;\n        return(\n        <React.Fragment>\n        \n           <Header page='To Dos'/> \n           {this.state.isLoading&&<Loader />}\n                <ul>\n                    {(!userID)&&this.props.todo&&this.props.todo.map((item)=>(\n                        <li key={item.id}><h3><FontAwesomeIcon icon={faClipboardCheck} /> {item.title}</h3><p>Status: {item.completed===true?'Done':'Pending'}</p>\n                        </li>\n                    ))}\n                    {userID&&this.props.todo&&this.props.todo.map((item)=>(\n                        item.userId==userID&&(<li key={item.id}><h3><FontAwesomeIcon icon={faClipboardCheck} />  {userName}: {item.title}</h3><p>Status: {item.completed===true?'Done':'Pending'}</p>\n                        </li>)\n                    ))}\n                </ul>\n        </React.Fragment>\n        )\n                    }\n}\n\nconst mapStateToProps=state=>(\n    {todo:state.todo}\n)\n\nconst mapActionsToProps={\n onUpdateToDo:updateToDo   \n}\n\nexport default connect(mapStateToProps,mapActionsToProps)(ToDos)","import React, { Component } from 'react';\nimport Header from './Header.js';\nimport Loader from './Loader.js';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGrinTongueSquint } from \"@fortawesome/free-solid-svg-icons\";\nimport {connect} from 'react-redux';\nimport {updatePosts} from '../actions';\n\nclass Posts extends Component{\n     constructor(){\n        super();\n        this.state = {\n            posts: [],\n            error: null,\n            isLoading:false\n        }\n    }\n  handleData =(data)=>{\n        console.log(JSON.stringify(data), null, '\\t');\n        console.log(data);\n        this.setState({\n            name:'Fred',\n            posts: data,\n            error: null,\n            isLoading:false\n        })\n        this.props.onUpdatePosts(data);\n    }\n  componentDidMount(){\n      if(!this.props.posts){\n        this.setState({isLoading:true});\n        let url = 'https://jsonplaceholder.typicode.com/posts/';\n        fetch(url)\n        .then(response => response.json())\n        .then(this.handleData)\n        .catch(err => {\n            this.setState({error:err})\n        })      \n      }\n    }\n    render(){\n        const userID=this.props.match.params.userID;\n        const userName=this.props.match.params.userName;\n        return(\n        <React.Fragment>\n           <Header page='Posts'/> \n           {this.state.isLoading&&<Loader />}\n                <ul>\n                    {(!userID)&&this.props.posts&&this.props.posts.map((item)=>(\n                        <li key={item.id}><h3><FontAwesomeIcon icon={faGrinTongueSquint} />  {item.title}</h3><p>{item.body}</p>\n                        </li>\n                    ))}\n                    {userID&&this.props.posts&&this.props.posts.map((item)=>(\n                        item.userId==userID&&(<li key={item.id}><h3><FontAwesomeIcon icon={faGrinTongueSquint} /> {item.title}</h3><p>{item.body}</p>\n                         <p>From: {userName}</p>                     \n                        </li>)\n                    ))}\n                </ul>\n        </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps=state=>(\n    {posts:state.posts}\n)\n\nconst mapActionsToProps={\n onUpdatePosts:updatePosts   \n}\n\nexport default connect(mapStateToProps,mapActionsToProps)(Posts)","import React, { Component } from 'react';\nimport Header from './Header.js';\n\n\nexport default class NotFound extends Component{\n     \n    render(){    \n        return(\n            <React.Fragment>\n            <Header page='No Such Page'/>\n           <h1>Sorry, page not found.</h1>\n        </React.Fragment>  \n            )\n    }\n}","import React, { Component } from 'react';\nimport Users from './components/Users.js';\nimport ToDos from './components/ToDos.js';\nimport Posts from './components/Posts.js';\nimport NotFound from './components/NotFound.js';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStroopwafel } from '@fortawesome/free-solid-svg-icons';\n\n\nlibrary.add(faStroopwafel)\n\nclass App extends Component {\n\n  render() {\n    return (\n        <React.Fragment>\n      <BrowserRouter basename=\"https://liu00414.github.io/react-redux-routing\">\n        <Switch>\n            <Route exact path=\"/\" component={Users} />\n            <Route exact path=\"/to-dos\" component={ToDos} />\n            <Route path=\"/to-dos/:userID/:userName\" component={ToDos} />\n            <Route exact path=\"/posts\" component={Posts} />\n            <Route path=\"/posts/:userID/:userName\" component={Posts} />\n            <Route component={NotFound} />\n        </Switch>   \n        </BrowserRouter>\n        \n        </React.Fragment>\n    )\n  }\n}\n//stateless functional component\nfunction example(){\n    return(\n    <div></div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    createStore,\n    combineReducers\n} from 'redux';\nimport {UPDATE_USER} from './actions';\nimport {UPDATE_TODO} from './actions';\nimport {UPDATE_POSTS} from './actions';\n\n\nfunction userReducer(state = [], {type,payload}) {\n    switch(type){\n        case UPDATE_USER:\n            return payload.user;\n        default:\n            return state;\n    }\n};\n\nfunction todoReducer(state = [], {type,payload}) {\n    switch(type){\n        case UPDATE_TODO:\n            return payload.todo;\n        default:\n            return state;\n    }\n};\n\nfunction postsReducer(state = [], {type,payload}) {\n    switch(type){\n        case UPDATE_POSTS:\n            return payload.posts;\n        default:\n            return state;\n    }\n};\n\nconst allReducers = combineReducers({\n    users: userReducer,\n    todo: todoReducer,\n    posts: postsReducer,\n});\n\n\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport { Provider } from 'react-redux';\nimport allReducers from \"./reducers\";\n\nconst store = createStore(allReducers, \n                          {\n    users:null,\n    todo:null,\n    posts:null,\n},\n                          window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n                         );\n console.log(store.getState());\n\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}